module Test where

import Daml.Script
import Main
import DA.Optional
import DA.Foldable

-- Parties structure for testing
data TestParties = TestParties with
  customerOne: Party
  customerTwo: Party
  storeOne: Party
  storeTwo: Party
  westDroneOne: Party
  westDroneTwo: Party
  eastDroneOne: Party
  westDrones: [Party]
  eastDrones: [Party]

-- Create parties for testing
setupParties: Script TestParties
setupParties = script do
  ada <- allocateParty "Ada"
  jack <- allocateParty "Jack"
  burgerHouse <- allocateParty "BurgerHouse"
  pizzaHouse <- allocateParty "PizzaHouse"
  westOne <- allocateParty "WestDroneOne"
  westTwo <- allocateParty "WestDroneTwo"
  eastOne <- allocateParty "EastDroneOne"
  return TestParties with
    customerOne = ada
    customerTwo = jack
    storeOne = burgerHouse
    storeTwo = pizzaHouse
    westDrones = [westOne, westTwo]
    eastDrones = [eastOne]
    westDroneOne = westOne
    westDroneTwo = westTwo
    eastDroneOne = eastOne

-- Create first Order contract and accept Order
setupAcceptedOrder: Party -> Party -> [Party] -> Script (ContractId Order)
setupAcceptedOrder c s d = script do
  let customerDetails = CustomerDetails
                        with
                          name = "Ada Lovelace"
                          address = "Rua Lisboa"
                          paymentMethod = "Credit Card"
  orderCid <- submitMulti [c, s][] do
    createCmd Order with
        orderId = "12345" -- pseudo id
        customer = c
        store = s
        deliveryDrones = []
        details = "1 large pizza"
        customerDetails = customerDetails
        value = 10.00
        state = "new"
  {-
    StoreOne accepts the order and designates westDrones as the eligible
    drones for delivery. The order details include the volume and weight
    of the package.
  -}
  submitMulti [s, c][] do
    exerciseCmd orderCid AcceptOrder
      with
        drones = d
        volume = 2.00
        weight = 1.00


{-

  HappyPath 1
  
  This script tests the full lifecycle of an order: from creation to acceptance,
  pickup, delivery, and finally, completion. It ensures that all steps are executed
  correctly and in sequence.
-}
orderDelivery : Script ()
orderDelivery = do

  -- Set up the test parties involved in the scenario
  testParties@TestParties{..} <- setupParties

  -- Customer places an order with storeOne
  orderCid <- setupAcceptedOrder customerOne storeOne westDrones

  orderCid <- submit storeOne do
    exerciseCmd orderCid AcceptOrder
      with
        drones = westDrones ++ eastDrones
        volume = 2.00
        weight = 1.00

  {-
    The first west drone proposes a delivery for the order. This proposal
    includes a delivery fee and specifies the proposing drone.
  -}
  deliveryProposalCid <- submit westDroneOne do
    exerciseCmd orderCid ProposeDelivery
      with
        fee = 10.00
        deliveryDrone = westDroneOne

  {-
    The east drone proposes a delivery for the order. This proposal
    includes a delivery fee and specifies the proposing drone.
  -}
  submit eastDroneOne do
    exerciseCmd orderCid ProposeDelivery
      with
        fee = 5.00
        deliveryDrone = eastDroneOne

  {-
    StoreOne accepts the delivery proposal from the west drone. This step
    confirms that the store agrees to the delivery terms and selects the
    drone for delivery.
  -}
  (orderCid, acceptedDelivery) <- submit storeOne do
    exerciseCmd deliveryProposalCid AcceptProposal with
      orderCid = orderCid

  {-
    The designated drone (westDroneOne) picks up the payload from StoreOne.
    This step involves both the store and the drone to confirm the pickup.
  -}
  (orderCid, pickedDelivery) <- submitMulti [storeOne, westDroneOne][] do
    exerciseCmd acceptedDelivery Pickup with
      orderCid = orderCid

  {-
    The drone (westDroneOne) delivers the package to the customer. This
    step involves a handshake, where the customer provides a delivery pin
    to confirm receipt of the package.
  -}
  submitMulti [customerOne, westDroneOne][] do
    exerciseCmd pickedDelivery Handshake
      with
        deliveryPin = 1234

  {-
    StoreOne completes the order after the successful delivery.
  -}
  submitMulti [storeOne, westDroneOne][] do
    exerciseCmd orderCid CompleteOrder
      with
        deliveryDrone = westDroneOne

  return ()

{-

  HappyPath 2
  
  This script tests the scenario where the store cancels the order and the deliveries.
-}
orderCancellation : Script ()
orderCancellation = do

  -- Set up the test parties involved in the scenario
  testParties@TestParties{..} <- setupParties

  -- Customer places an order with storeOne
  orderCid <- setupAcceptedOrder customerOne storeOne westDrones

  {-
    The first west drone proposes a delivery for the order. This proposal
    includes a delivery fee and specifies the proposing drone.
  -}
  deliveryProposalCid <- submit westDroneOne do
    exerciseCmd orderCid ProposeDelivery
      with
        fee = 10.00
        deliveryDrone = westDroneOne

  {-
    StoreOne accepts the delivery proposal from the west drone. This step
    confirms that the store agrees to the delivery terms and selects the
    drone for delivery.
  -}
  (orderCid, acceptedDelivery) <- submit storeOne do
    exerciseCmd deliveryProposalCid AcceptProposal with
      orderCid = orderCid

  {-
    The store and drones cancel the order.
  -}
  submitMulti (storeOne :: westDrones) [] do
    exerciseCmd orderCid CancelOrder

  return ()

{-

  HappyPath 3
  
  This script tests the scenario where the store is not satisfied with the delivery proposals 
  and subsequently rejects them. The test involves setting up parties, placing an order, 
  receiving delivery proposals from drones, and the store rejecting these proposals.
-}
rejectDeliveries : Script ()
rejectDeliveries = do

  -- Set up the test parties involved in the scenario
  testParties@TestParties{..} <- setupParties

  -- Customer places an order with storeOne
  orderCid <- setupAcceptedOrder customerOne storeOne westDrones

  {-
    The first west drone proposes a delivery for the order. This proposal
    includes a delivery fee and specifies the proposing drone.
  -}
  submit westDroneOne do
    exerciseCmd orderCid ProposeDelivery
      with
        fee = 10.00
        deliveryDrone = westDroneOne
    
  {-
    The second west drone proposes a delivery for the order. This proposal
    includes a delivery fee and specifies the proposing drone.
  -}
  submit westDroneTwo do
    exerciseCmd orderCid ProposeDelivery
      with
        fee = 8.00
        deliveryDrone = westDroneTwo

  -- Retrieve order payload
  Some order <- queryContractId storeOne orderCid
  -- Get Order deliveries
  deliveries <- mapA (\drone -> queryContractKey @Delivery storeOne (drone, order.orderId)) order.deliveryDrones
  -- Remove Nones
  let validDeliveries = catOptionals deliveries
  -- Reject order deliveries
  mapA_ (\delivery -> submit storeOne do exerciseCmd (fst delivery) RejectProposal) validDeliveries

{-

  Unhappy Path 1
  
  This script tests the scenario where a drone that is not eligible for an order 
  attempts to propose a delivery. It verifies that only authorized 
  drones can propose deliveries for accepted orders.
-}
wrongDrones : Script ()
wrongDrones = script do

  -- Set up the test parties involved in the scenario
  testParties@TestParties{..} <- setupParties

  -- Customer places an order with storeOne
  orderCid <- setupAcceptedOrder customerOne storeOne westDrones

  {-
    East drones cannot make a delivery proposal since they were not included in the group of drones
    eligible for delivery.
  -}
  submitMustFail eastDroneOne do
    exerciseCmd orderCid ProposeDelivery
      with
        fee = 8.00
        deliveryDrone = eastDroneOne

  return ()

{-

  Unhappy Path 2
  
  This script tests the scenario where a store attempts to accept orders 
  that belong to a different store.
-}
wrongOrder : Script ()
wrongOrder = script do

  testParties@TestParties{..} <- setupParties

  -- Customer places order
  orderCid <- setupAcceptedOrder customerOne storeOne westDrones
  
  -- Store two attempts to accept order for store one
  submitMultiMustFail [storeTwo, customerOne][] do
    exerciseCmd orderCid AcceptOrder
      with
        drones = westDrones
        volume = 2.00
        weight = 1.00

  return ()

{-

  Unhappy Path 3

  This script tests the scenario where a store attempts to cancel an order 
  with a delivery that is already in progress.
-}
unableToCancel : Script ()
unableToCancel = script do

  testParties@TestParties{..} <- setupParties

  -- Customer places order
  orderCid <- setupAcceptedOrder customerOne storeOne westDrones

  {-
    The first west drone proposes a delivery for the order. This proposal
    includes a delivery fee and specifies the proposing drone.
  -}
  deliveryProposalCid <- submit westDroneOne do
    exerciseCmd orderCid ProposeDelivery
      with
        fee = 10.00
        deliveryDrone = westDroneOne

  {-
    StoreOne accepts the delivery proposal from the west drone. This step
    confirms that the store agrees to the delivery terms and selects the
    drone for delivery.
  -}
  (orderCid, acceptedDelivery) <- submit storeOne do
    exerciseCmd deliveryProposalCid AcceptProposal with
      orderCid = orderCid

  {-
    The designated drone (westDroneOne) picks up the payload from StoreOne.
    This step involves both the store and the drone to confirm the pickup.
  -}
  (orderCid, deliveryCid) <- submitMulti [storeOne, westDroneOne][] do
    exerciseCmd acceptedDelivery Pickup with
      orderCid = orderCid

  {-
    CancelOrder fails since the delivery of the order is already in progress.
  -}
  submitMultiMustFail (storeOne :: westDrones) [] do
    exerciseCmd orderCid CancelOrder

  return ()
